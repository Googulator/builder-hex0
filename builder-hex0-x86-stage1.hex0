# SPDX-FileCopyrightText: 2023 Richard Masters <grick23@gmail.com>
# SPDX-License-Identifier: MIT
#
# Builder-Hex0 is a small bootable machine image which acts as
# a bootloader using a hex0 compiler. It compiles hex0 code starting
# at sector 2, placing the compiled code at address 0x7E00 and then
# and then jumps to the resulting binary.
#
# hex0 is a "language" for binary encoding in hexadecimal
# with support for comments.

# Functions:
# _start
# read_sector
# read
# compile

#------------------------------------------------------------
# Memory:
#  9FC00 -  FFFFF BIOS
#   7C00 -   7E00 MBR/code
#   7A00 -   7BFF sector read buffer
# < 7700          real mode stack
#------------------------------------------------------------


# ------------------------------------------------------------
# Stub Entry Point
#
# boot drive is in dl
#
#:_start

# We cannot be sure the registers are initialized to zero so we
# do that first. We far jump in order to set CS.
# Use special encoding of "xor ax, ax" to appease some BIOSes.
33 C0             # xor ax, ax
EA 07 7C 00 00    # jmp far setcs
#:setcs
8E D8             # mov ds, ax
8E C0             # mov es, ax
8E D0             # mov ss, ax
BC 00 77          # mov sp, 0x7700
FC                # cld ; clear direction flag

#----------------------------------------
# Compile hex0 to binary
# compile(dl=boot_drive):
BF 00 7E          # mov di, $stage2_entry

# this flag is set after the first digit is seen
31 DB             # xor bx,bx

#:read_loop
E8 7D 00          # call read
84 C0             # test al, al
74 4B             # jz finish

3C 23             # cmp al, '#'
74 28             # jz skip_comment

3C 3B             # cmp ';'
74 24             # jz skip_comment

3C 66             # cmp al, 'f'
7F ED             # jg read_loop

3C 61             # cmp al, 'a'
7C 04             # jl maybe_upper

# Handle a to f
2C 57             # sub al, 'a'-10 == 87 = 0x57
EB 21             # jmp maybe_store

#:maybe_upper
3C 46             # cmp al, 'F'
7F E1             # jg read_loop

3C 41             # cmp al, 'A'
7C 04             # jl maybe_digit

# Handle A to F
2C 37             # sub al, 'A'-10 == 55 = x37
EB 15             # jmp maybe_store

#:maybe_digit
3C 39             # cmp al, '9'
7F D5             # jg read_loop

3C 30             # cmp al, '0'
7C D1             # jl read_loop

# Handle 0 to 9
2C 30             # sub al, '0' == x30
EB 09             # jmp maybe_store

#:skip_comment
E8 4A 00          # call read
3C 0A             # cmp al, '\n'
75 F9             # jnz skip_comment
EB C4             # jmp read_loop

# only store on second digit
#:maybe_store
84 DB             # test bl, bl
75 09             # jnz second_digit

# If on first digit, record and keep going
#:first_digit
C0 E0 04          # shl al, 4
88 C7             # mov bh, al
FE C3             # inc bl
EB B7             # jmp read_loop

# If on second digit, store and clear state
#:second_digit
08 C7             # or bh, al
88 F8             # mov al, bh
AA                # stosb
31 DB             # xor bx, bx

EB AE             # jmp read_loop

#:finish
E9 95 01          # jmp stage2_entry


#------------------------------------------------------------
#[7C6B]
#:read_sector
# input:
# di = *dest_addr
# cx=cylinder/sector
# dh = head, dl=drive)
#
# returns: di - next byte to write to
#          cx,dh - next disk sector to read from
#
50                      # push ax
53                      # push bx

89 FB                   # mov bx, di      ; int 13 writes to bx

#:read_one_loop
B4 02                   # mov ah, 2        ; rw mode = 02 (read)
B0 01                   # mov al, 1        ; num_sectors
CD 13                   # int 0x13
72 14                   # jnc read_error

# Check for nonzero, not 1, because some BIOSes may read more
# sectors for future use, and wrongly report it
3C 00                   # cmp al, 0
74 10                   # jz read_error

80 F9 3F                # cmp cl, 0x3f        ; if sector_num == max_sector
74 04                   # jz next_head        ;      goto next_head
FE C1                   # inc cl              ; else sector_num++;
EB 04                   # jmp read_sector_finish

#:next_head
FE C6                   # inc dh              ; else head_num++
B1 01                   # mov cl, 1           ; sector = 1

#:read_sector_finish
5B                      # pop bx
58                      # pop ax
C3                      # ret

# Reset disk subsystem on error
#:read_error
31 C0                   # xor ax, ax
CD 13                   # int 0x13
EB DE                   # jmp read_one_loop


#----------------------------------------
#[7C91]
#:last_read_location
02 00                   ; last_cylinder/sector
00                      ; last_head
FF 01                   ; last_byte

#----------------------------------------
#[7C96]
#:read
53                      # push bx
51                      # push cx
52                      # push dx
56                      # push si
57                      # push di

# get current position
BB 91 7C  # mov bx, last_read_location
8B 0F                   # mov cx, [bx]
8A 77 02                # mov dh, [bx+2]
8B 47 03                # mov ax, [bx+3]

#end of sector?
3D FF 01                # cmp ax, 0x01ff
74 03                   # je read_next_sector

#nextchar:
40                      # inc ax
EB 0D                   # jmp getchar

#:read_next_sector
BF 00 78                # mov di, 0x7800
E8 B7 FF                # call read_sector
# save new location and offset
89 0F                   # mov [bx], cx
88 77 02                # mov [bx+2], dh
31 C0                   # xor ax, ax

#:getchar
89 47 03                # mov [bx+3], ax
BE 00 78                # mov si, 0x7800
89 C3                   # mov bx, ax
8A 00                   # mov al, [si+bx]

#finish:
5F                      # pop di
5E                      # pop si
5A                      # pop dx
59                      # pop cx
5B                      # pop bx
C3                      # ret


# padding to fill a 512 byte sector
00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00

# disk ID - some BIOSes don't tolerate zeros
12 34 56 78

# writeability flag - use 5E5E for read-only
00 00

# partition table - some BIOSes require this
# Type B5 for "Boot5trap"
80 00 02 00 B5 FF FF FF 01 00 00 00 FF FF FF FF
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

# This is the DOS/MBR identifier at offset 510:
55 AA
#:stage2_entry
